// Generated by gencpp from file pi_io/gpio_input.msg
// DO NOT EDIT!


#ifndef PI_IO_MESSAGE_GPIO_INPUT_H
#define PI_IO_MESSAGE_GPIO_INPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pi_io
{
template <class ContainerAllocator>
struct gpio_input_
{
  typedef gpio_input_<ContainerAllocator> Type;

  gpio_input_()
    : index(0)
    , value(false)  {
    }
  gpio_input_(const ContainerAllocator& _alloc)
    : index(0)
    , value(false)  {
  (void)_alloc;
    }



   typedef uint8_t _index_type;
  _index_type index;

   typedef uint8_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::pi_io::gpio_input_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_io::gpio_input_<ContainerAllocator> const> ConstPtr;

}; // struct gpio_input_

typedef ::pi_io::gpio_input_<std::allocator<void> > gpio_input;

typedef boost::shared_ptr< ::pi_io::gpio_input > gpio_inputPtr;
typedef boost::shared_ptr< ::pi_io::gpio_input const> gpio_inputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pi_io::gpio_input_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pi_io::gpio_input_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pi_io

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pi_io': ['/home/edison/turtle_ws1/src/pi_io/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pi_io::gpio_input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pi_io::gpio_input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pi_io::gpio_input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pi_io::gpio_input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_io::gpio_input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_io::gpio_input_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pi_io::gpio_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b96eddd279766f8d4dd7aa09ca9fb9a8";
  }

  static const char* value(const ::pi_io::gpio_input_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb96eddd279766f8dULL;
  static const uint64_t static_value2 = 0x4dd7aa09ca9fb9a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_io::gpio_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pi_io/gpio_input";
  }

  static const char* value(const ::pi_io::gpio_input_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pi_io::gpio_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 index   # GPIO index starting at 0\n\
bool value    # GPIO value\n\
";
  }

  static const char* value(const ::pi_io::gpio_input_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pi_io::gpio_input_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpio_input_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pi_io::gpio_input_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pi_io::gpio_input_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PI_IO_MESSAGE_GPIO_INPUT_H
